package net.gudenau.cavegame.gui.layout;

import net.gudenau.cavegame.gui.component.Component;
import net.gudenau.cavegame.gui.component.Container;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.SequencedCollection;

/// An immutable layout of a {@link Container} that was generated by a {@link LayoutEngine}
///
/// @param width The total width of this layout
/// @param height The total height of this layout
/// @param components The components of this layout
public record Layout(
    int width,
    int height,
    SequencedCollection<Entry> components
) {

    /// The location and size of a {@link Component} that was positioned by a {@link LayoutEngine}.
    ///
    /// @param x The X position of this entry
    /// @param y The Y position of this entry
    /// @param width The width of this entry
    /// @param height The width of this entry
    /// @param component The component of this entry
    public record Entry(
        int x,
        int y,
        int width,
        int height,
        @NotNull Component component
    ) {
        @Deprecated(forRemoval = true)
        public Entry(int x, int y, @NotNull Component component) {
            this(x, y, component.width(), component.height(), component);
        }
    }

    /// Searches the entries of this layout to find the entry that matches the provided component.
    ///
    /// @param child The child to search for
    /// @return The found entry
    /// @throws IllegalStateException If the component was not found in this layout
    @NotNull
    public Entry entryOf(@Nullable Component child) {
        return components.stream()
            .filter((entry) -> entry.component == child)
            .findAny()
            .orElseThrow(() -> new IllegalStateException("Component " + child + " was not a child of this layout"));
    }
}
